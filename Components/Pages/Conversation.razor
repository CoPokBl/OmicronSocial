@page "/Conversation"
@rendermode InteractiveServer
@using System.Security.Cryptography
@using OmicronSocial.Data
@using OmicronSocial.Data.Schemas

<RequireLogin Callback="OnLogin"></RequireLogin>

<h3>Conversation</h3>

@if (_user == null) {
    <p>Loading...</p>
}
else {
    <p>You are @_id</p>

    @if (_chat == null) {
        <p>Waiting for another user...</p>
    } else {
        <p>Connected with @_chat.NotMe(_id)</p>
    
        <h5>Messages:</h5>
        @foreach((int peer, string msg) in _messages) {
            <p>@(peer == _id ? "You" : "Peer"): @msg</p>
        }
    
        <form @onsubmit="SendMessage">
            <p class="text-danger">@_error</p>
            <input class="form-control" @bind="_message"/>
        </form>
    }

    <button class="btn btn-secondary" @onclick="StateHasChanged">Refresh</button>
}

@code {
    /// <summary>
    /// Give ourselves a random ID, so we can be identified.
    /// </summary>
    private readonly int _id = RandomNumberGenerator.GetInt32(1000000);
    
    /// <summary>
    /// The current chat, or null if we haven't started a chat yet.
    /// </summary>
    private Chat? _chat;
    
    /// <summary>
    /// The list of messages that have been sent.
    /// Includes the sender ID and the message.
    /// </summary>
    private readonly List<(int, string)> _messages = [];
    
    /// <summary>
    /// The message currently waiting being sent.
    /// This is bound to the HTML input element.
    /// </summary>
    private string _message = string.Empty;

    /// <summary>
    /// The currently logged-in user.
    /// Null if the login process has not completed.
    ///
    /// Don't do anything until this completes.
    /// </summary>
    private User? _user;

    private string _error = "";

    // This won't run if they aren't logged in because they have to be
    private Task OnLogin((User?, string) data) {
        _user = data.Item1;  // User won't be null if they are logged in.
        
        Chats.Queue(_id, Connected);
        Console.WriteLine($"Queuing as {_id}...");
        return Task.CompletedTask;
    }

    // When we connect to a chat
    private void Connected(Chat chat) {
        _chat = chat;
        chat.Subscribe(OnMessage);
        InvokeAsync(StateHasChanged).Wait();
    }

    // When we receive a message (Including from ourselves)
    private void OnMessage(int peer, string msg) {
        _messages.Add((peer, msg));
        InvokeAsync(StateHasChanged).Wait();
    }

    // Listener for clicking enter
    private void SendMessage() {
        if (_message.Length is 0 or > 512) {  // Validate message
            _error = "Message must be between 1 and 512 characters.";
            StateHasChanged();
            return;
        }
        
        _chat!.SendMessage(_id, _message);
        _message = string.Empty;
        _error = "";
        StateHasChanged();
    }
}